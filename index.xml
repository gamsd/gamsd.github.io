<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>home on</title><link>http://dantas.io/</link><description>Recent content in home on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 11 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://dantas.io/index.xml" rel="self" type="application/rss+xml"/><item><title>cv</title><link>http://dantas.io/cv/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>http://dantas.io/cv/</guid><description>&amp;lt;div&amp;gt; &amp;lt;script src=&amp;quot;https://gist.github.com/gamsd/07cb2a234a87a5775734.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt;</description></item><item><title>Beautiful collaborative presentations with reveal.js and Docker</title><link>http://dantas.io/blog/revealjs-docker-presentations/</link><pubDate>Tue, 08 Mar 2016 17:36:28 +0000</pubDate><guid>http://dantas.io/blog/revealjs-docker-presentations/</guid><description>Recently in a chat with my friend and manager at VivaReal Luis Guerrero, we caught ourselves discussing the best way to build presentations in a collaborative way. I rather build my presentations from code, using reveal.js, that&amp;rsquo;s how I am most productive. While I was building one of such presentations, though, Luis rightly pointed out that we didn&amp;rsquo;t have a good setup to work on it as a team.
Being a programmer, I knew I could make it better with not a lot of effort.</description></item><item><title>Communicating docker-machines over networked physical hosts</title><link>http://dantas.io/blog/docker-machine-port-forwarding/</link><pubDate>Tue, 01 Mar 2016 02:50:25 +0000</pubDate><guid>http://dantas.io/blog/docker-machine-port-forwarding/</guid><description>The problem Here at VivaReal in Brazil we&amp;rsquo;re doing a lot of Scala and Akka development lately. We&amp;rsquo;re also strong supports of Docker. Usually, this combination yields great results, but as most of our team program on MacBooks, Docker sometimes gives us minor annoyances for not being native to OS X.
This time I wanted to build an Akka Cluster in a Docker-based fashion and develop/test it across independent physical hosts over a network.</description></item><item><title>Akka HTTP: musings from production</title><link>http://dantas.io/blog/akka-http-musings-from-production/</link><pubDate>Wed, 16 Dec 2015 22:29:02 +0000</pubDate><guid>http://dantas.io/blog/akka-http-musings-from-production/</guid><description>Back in September I had the chance to speak at ScalaUpNorth in Toronto about Akka HTTP. The talk was about my experiences in using this library in a greenfield project at Vivareal.
The talk spanned from motivations to some early results and community talk. Some highlights are:
Microservices architecture driving new challenges on performance and error handling First steps with Akka Streams Brief comparison of different Scala libraries for APIs and why we chose Akka HTTP Some impressions, good andÂ bad Performance evidence (not proofs or benchmarking) Improving the community Several months into it, we are still using Akka Streams and HTTP at Vivareal in both new and legacy projects.</description></item></channel></rss>